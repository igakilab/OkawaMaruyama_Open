TEst01の分割後コードの仕様

### STEP1
1. `Scanner`クラスをインポートし、新しいインスタンスを作成することで標準入力を受け取る準備を行う。  2. ユーザにじゃんけんゲームの回数を入力するように促すメッセージを出力する。  3. ユーザから整数値を受け取る。  4. 入力された数値が0以下の場合、再入力を促すメッセージを表示し、0より大きい数値が入力されるまでループで入力を受け付ける。最初の入力で0より大きい数値が入力された場合はそのまま次のステップに進む。  5.テスト用に入力されたゲーム回数を出力して確認する。
実行結果:
$ java Test02_1
[じゃんけんゲームを何回戦実施するか入力してください]
3 <-
ゲーム回数: 3

$ java Test02_1
[じゃんけんゲームを何回戦実施するか入力してください]
-1 <-
0以下の数値が入力されたのでもう一度入力し直しましょう
2 <-
ゲーム回数: 2

### STEP2
1. `Test02_1`で作成した内容を継承し、引き続き、CPUの手を決めるための整数値をユーザから入力されるようにする。  2. ユーザがゲーム回数分の整数値を入力することをメッセージで指示する。  3. 配列を使用して、ユーザが入力した任意の整数値をCPUの手として指定されるように取得する。  4. 取得した数値を一つずつ配列に格納する。  5. 正しくCPUの手が取得できたことを確認するため、入力された数値を出力するテスト用のコードを記述する。
実行結果:
$ java Test02_2
[じゃんけんゲームを何回戦実施するか入力してください]
3 <-
[CPUの手として任意の数字をゲーム数分だけ入力してください]
1 <-
2 <-
3 <-
1 2 3

###STEP3
1. `decideEnemyHand`という新しいメソッドを作成する。このメソッドは、CPUの手の数値に負の数が含まれていた場合、それを正の数に変換する。  2. `Test02_2`で取得したCPUの手の配列を引数として受け取る。  3. 引数として受け取った配列の各要素に対して、負の数があるかどうかをループで確認する。  4. 負の数が見つかったら、それを正の数に変換する。  5. 各要素を3で割った余りを新たに格納することでCPUの手を決定する。  6. 負の数を正の数に変換した際には、その旨を表示する。
実行結果:
$ java Test02_3
[じゃんけんゲームを何回戦実施するか入力してください]
1 <-
[CPUの手として任意の数字をゲーム数分だけ入力してください]
-1 <-
CPUの手を決定します
負の数は正の数に変換します