Test05の分割後コード(Test06)の仕様

### STEP1
1. `public class` を用いてクラスを宣言し、クラス名を `Test06_1` とします。
2. `public static void main(String[] args)` メソッドを宣言します。このメソッドはJavaプログラムのエントリーポイントです。
3. `System.out.println("mainメソッド");` を用いて、標準出力に "mainメソッド" を表示します。
実行結果:
$ java Test06_1
mainメソッド

### STEP2
1. クラスを `Test06_2` として宣言します。
2. `main` メソッド内で、ゲームのタイトル "\nHit&Blow\n" を `String` 型変数 `title` に格納します。
3. `System.out.println(title);` を用いて、タイトルを表示します。
4. 標準出力に "タイトルが表示されました" と表示して、確認用のメッセージを出力します。
実行結果:
$ java Test06_2

Hit&Blow

タイトルが表示されました

### STEP3
1. クラスを `Test06_3` として宣言します。
2. `main` メソッド内で、タイトルを表示する処理を含めます。
3. `Scanner` を使ってユーザーからの入力を受け取る準備をします。
4. `boolean` 型変数 `conti` を `true` で初期化し、ゲームを継続するか管理します。
5. `while (conti)` ループを作成し、ゲームが続行される間、ループが実行されます。
6. テスト用コードとして、"ループ内" を標準出力に出力して動作確認をします。
7. 一度でループを抜けるために、`conti` に `false` を代入します。
8. スキャナーを閉じるために `scanner.close();` を書きます。
実行結果:
$ java Test06_3

Hit&Blow

ループ内

### STEP4
1. クラスを `Test06_4` として宣言します。
2. `main` メソッド内で、ゲームのタイトルを表示し、`Scanner` を設定します。
3. 答えの数字を格納するために `int` 型の配列 `answer` を宣言し、そのサイズは固定の3とします。
4. 無限ループを作成し、ユーザーが一意な整数を3つ入力するように促します。
5. ユーザー入力から、答えを生成するための入力値を3つ受け取ります。
6. 各入力値を 9 で割った余りに1を加えて、`answer` の各要素に格納します。
7. 答えが重複しているか確認し、重複がなければループを抜けます。そうでなければ再入力を求めます。
8. 答えの生成が完了したことを示すテスト用メッセージを出力します。
9. 一度でループを抜けるために、`conti` に `false` を代入します。
10. スキャナーを閉じるために `scanner.close();` を書きます。
実行結果:
$ java Test06_4

Hit&Blow

一意な整数を3つ入力してください（例: 12 34 56）:
10 20 30 <-
答えの生成ロジック完了: 2, 3, 4

### STEP5
1. クラスを `Test06_5` として宣言します。
2. `main` メソッドにて、`Scanner` を設定し、ユーザーの入力を受け取るようにします。
3. 答えを生成する前に、ユーザーに一意な3つの整数を入力させ、生成ロジックを実行します。
4. 答えの3つの数字が一意であることを確認し、無限ループを抜け出します。
5. ゲーム本体部分の開始として、ユーザーに3つのスペース区切りの数字を入力させます。
6. チャレンジ回数をカウントし、何回目の挑戦であるかを表示します。
7. `for` ループを用いてユーザーの入力を配列に格納します。このとき、入力サイズと同じ回数ループします。
8. `for` ループを用いて、ユーザーの入力と生成した答えを比較し、一致している数字を数える `hit` と異なる位置にあるが同じ数字を数える `blow` をカウントします。
9. ゲームロジック雛形の完了を示すメッセージを出力します。
10. 一度でループを抜けるために、`conti` に `false` を代入します。
11. スキャナーを閉じます。
実行結果:
$ java Test06_5

Hit&Blow

一意な整数を3つ入力してください（例: 12 34 56）:
10 20 30 <-
数字を3個SPACE区切りで入力してください
[1回目]
2 3 4 <-
ゲームロジックの雛形完了

### STEP6
1. クラスを `Test06_6` として宣言します。
2. `main` メソッド内にて、ゲームの条件を表示し、その後に答え生成のためのユーザー入力を処理します。
3. 整数入力に対して、答え生成ロジックを適用し、生成された回答の重複をチェックします。
4. 無限ループでユーザーに3つの数字の入力を求め、入力が得られたら `hit` と `blow` をカウントします。
5. 入力された値のそれぞれに対応して正解の数字をヒントとして出力します。もしユーザーの入力が0の場合、答えの対応する位置の数字を明示します。
6. `if` 文を用いて、 `hit` の値が答えの桁数と一致した場合、ゲームクリアとしてループを抜けます。
7. ゲームが続く場合、次のループへ移行します。
8. ヒントを表示するメソッド `printHinto` を作成し、入力が0だった場合に正しいヒントを出力します。
9. スキャナーを閉じます。
実行結果:
$ java Test06_6

Hit&Blow

一意な整数を3つ入力してください（例: 12 34 56）:
10 20 30 <-
数字を3個SPACE区切りで入力してください
[1回目]
2 3 4 <-
ヒント: 2 3 4
Hit:3 Blow:0
おめでとう！ 答えを正解しました！

### STEP7
1. クラスを `Test06_7` として宣言します。
2. `main` メソッドで `Scanner` を用い、ユーザー入力を取得します。
3. ゲームスタート時にタイトルを表示し、ユーザーに3つの一意な整数を入力するように促します。
4. 生成された答えの重複チェックを行い、問題がなければループから抜け出し、その答えをゲームの問題として設定します。
5. ゲームが続く間、ユーザー入力を3つ受け取り、ヒット数とブロー数を計算します。
6. 各試行ごとにヒントを表示し、ヒット数が正解数に達した場合、ゲームはクリアされます。
7. ゲーム終了後にユーザーに再挑戦するかを尋ねます。入力が "yes" の場合はゲームを続け、"no" の場合はゲームを終了します。
8. `checkContinue` メソッドを作成し、ユーザーの入力に基づきゲームを続行するかの判断を行います。
9. ヒントを印字する `printHinto` メソッドを利用して、入力が0の場合に正しい答えを提示します。
10. スキャナーを閉じます。
実行結果:
$ java Test06_7

Hit&Blow

一意な整数を3つ入力してください（例: 12 34 56）:
10 20 30 <-
数字を3個SPACE区切りで入力してください
[1回目]
2 3 4 <-
ヒント: 2 3 4
Hit:3 Blow:0
おめでとう！ 答えを正解しました！
ゲームを続けますか?[yes/no]
no <-




