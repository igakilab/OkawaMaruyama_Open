{
  "Work49_1": {
    "step": "STEP1 mainメソッドを宣言",
    "subtitle": "mainメソッドを宣言",
    "instructions": "mainメソッドを作成し、簡単な出力文を追加して動作確認を行います。このステップではクラスとmainメソッドの基本的な枠組みを設定し、プログラムが正しく実行されるかの初期テストを行います。"
  },
  "Work49_2": {
    "step": "STEP2 身長と体重の入力コード生成",
    "subtitle": "身長と体重の入力コード生成",
    "instructions": "Scannerクラスをインポートし、標準入力から身長と体重を入力できるようにします。Scannerを用いて入力された文字列を整数に変換し（ここでは身長と体重は整数として入力される前提です）、それぞれの値を変数に保存します。最後に入力された値を確認するために、入力値をコンソールに表示します。"
  },
  "Work49_3": {
    "step": "STEP3 calcBmiメソッドの宣言",
    "subtitle": "calcBmiメソッドの宣言",
    "instructions": "calcBmiメソッドを宣言し、このメソッドが身長と体重を受け取ってBMIを計算する機能を持つことを明示します。まだ実装はしていませんが、仮にメソッドをmainメソッドから呼び出し、戻り値を表示するテストコードを含めます。これにより、メソッドの呼び出し部分が正しく機能するか確認します。"
  },
  "Work49_4": {
    "step": "STEP4 calcBmiメソッドの実装",
    "subtitle": "calcBmiメソッドの実装",
    "instructions": "calcBmiメソッドを実装し、身長と体重からBMIを計算する具体的な計算式をコードに追加します。BMIの計算は、体重(kg)を身長(m)の二乗で割ることで行います。身長はcm単位で入力されるため、計算時には100で割ってm単位に変換します。このステップで実装されたメソッドをmainメソッドから呼び出し、計算結果を表示して確認します。"
  },
  "Work49_5": {
    "step": "STEP5 evalWeightメソッドの宣言",
    "subtitle": "evalWeightメソッドの宣言",
    "instructions": "evalWeightメソッドを宣言します。このメソッドはBMIを受け取り、それに基づいて「低体重」「普通体重」「肥満」を判断し、結果 を文字列で返します。具体的な実装はまだ行わず、メソッドの枠組みとテストコードの出力のみを実施します。このステップでは、メソッドのプロトタイプと基本的な接続を設定します。"
  },
  "Work49_6": {
    "step": "STEP6 evalWeightメソッドの詳細ルール実装",
    "subtitle": "evalWeightメソッドの詳細ルール実装",
    "instructions": "evalWeightメソッドに条件分岐を実装して、BMIの値に基づく体重の評価を行います。「低体重」はBMIが18.5未満、「普通体重」はBMIが18.5以上25未満、「肥満」はBMIが25以上の場合とし、それぞれの条件に基づいて適切な文字列を返します。ここでのif文による条件分岐が正しく設定されていることが、プログラムの正確性に直接影響します。"
  },
  "Work49_7": {
    "step": "STEP7 mainメソッドで全てを統合",
    "subtitle": "mainメソッドで全てを統合",
    "instructions": "mainメソッド内で、これまでに定義したメソッドを呼び出して身長と体重からBMIを計算し、その結果に基づく体重評価を表示します。ここでは、各メソッドが正しく連携して動作することを確認し、全体としてのプログラムの完成を目指します。また、計算結果をフォーマットして表示し、最後にScannerオブジェクトをclose()メソッドで閉じることで、リソースの適切な管理も行います。"
  }
}