{
  "Test06_1": {
    "step": "STEP1 mainメソッドの宣言",
    "subtitle": "mainメソッドの宣言",
    "instructions": "1. `public class` を用いてクラスを宣言し、クラス名を `Test06_1` とします。\n2. `public static void main(String[] args)` メソッドを宣言します。このメソッドはJavaプログラムのエントリーポイントです。\n3. `System.out.println(\"mainメソッド\");` を用いて、標準出力に \"mainメソッド\" を表示します。",
    "expectedOutput": "$ java Test06_1<br>mainメソッド"
  },
  "Test06_2": {
    "step": "STEP2 タイトルの表示",
    "subtitle": "タイトルを表示",
    "instructions": "1. クラスを `Test06_2` として宣言します。\n2. `main` メソッド内で、ゲームのタイトル \"\\nHit&Blow\\n\" を `String` 型変数 `title` に格納します。\n3. `System.out.println(title);` を用いて、タイトルを表示します。\n4. 標準出力に \"タイトルが表示されました\" と表示して、確認用のメッセージを出力します。",
    "expectedOutput": "$ java Test06_2<br><br>Hit&Blow<br><br>タイトルが表示されました"
  },
  "Test06_3": {
    "step": "STEP3 ゲームのループ",
    "subtitle": "ゲームを続けるためのループを宣言",
    "instructions": "1. クラスを `Test06_3` として宣言します。\n2. `main` メソッド内で、タイトルを表示する処理を含めます。\n3. `Scanner` を使ってユーザーからの入力を受け取る準備をします。\n4. `boolean` 型変数 `conti` を `true` で初期化し、ゲームを継続するか管理します。\n5. `while (conti)` ループを作成し、ゲームが続行される間、ループが実行されます。\n6. テスト用コードとして、\"ループ内\" を標準出力に出力して動作確認をします。\n7. 一度でループを抜けるために、`conti` に `false` を代入します。\n8. スキャナーを閉じるために `scanner.close();` を書きます。",
    "expectedOutput": "$ java Test06_3<br><br>Hit&Blow<br><br>ループ内"
  },
  "Test06_4": {
    "step": "STEP4 答えの生成",
    "subtitle": "答えの生成ロジックを作成",
    "instructions": "1. クラスを `Test06_4` として宣言します。\n2. `main` メソッド内で、ゲームのタイトルを表示し、`Scanner` を設定します。\n3. 答えの数字を格納するために `int` 型の配列 `answer` を宣言し、そのサイズは固定の3とします。\n4. 無限ループを作成し、ユーザーが一意な整数を3つ入力するように促します。\n5. ユーザー入力から、答えを生成するための入力値を3つ受け取ります。\n6. 各入力値を 9 で割った余りに1を加えて、`answer` の各要素に格納します。\n7. 答えが重複しているか確認し、重複がなければループを抜けます。そうでなければ再入力を求めます。\n8. 答えの生成が完了したことを示すテスト用メッセージを出力します。\n9. 一度でループを抜けるために、`conti` に `false` を代入します。\n10. スキャナーを閉じるために `scanner.close();` を書きます。",
    "expectedOutput": "$ java Test06_4<br><br>Hit&Blow<br><br>一意な整数を3つ入力してください（例: 12 34 56）:<br>10 20 30 &lt;-<br>答えの生成ロジック完了: 2, 3, 4"
  },
  "Test06_5": {
    "step": "STEP5 ゲームロジックの雛形",
    "subtitle": "ゲームロジックの雛形を作成",
    "instructions": "1. クラスを `Test06_5` として宣言します。\n2. `main` メソッドにて、`Scanner` を設定し、ユーザーの入力を受け取るようにします。\n3. 答えを生成する前に、ユーザーに一意な3つの整数を入力させ、生成ロジックを実行します。\n4. 答えの3つの数字が一意であることを確認し、無限ループを抜け出します。\n5. ゲーム本体部分の開始として、ユーザーに3つのスペース区切りの数字を入力させます。\n6. チャレンジ回数をカウントし、何回目の挑戦であるかを表示します。\n7. `for` ループを用いてユーザーの入力を配列に格納します。このとき、入力サイズと同じ回数ループします。\n8. `for` ループを用いて、ユーザーの入力と生成した答えを比較し、一致している数字を数える `hit` と異なる位置にあるが同じ数字を数える `blow` をカウントします。\n9. ゲームロジック雛形の完了を示すメッセージを出力します。\n10. 一度でループを抜けるために、`conti` に `false` を代入します。\n11. スキャナーを閉じます。",
    "expectedOutput": "$ java Test06_5<br><br>Hit&Blow<br><br>一意な整数を3つ入力してください（例: 12 34 56）:<br>10 20 30 &lt;-<br>数字を3個SPACE区切りで入力してください<br>[1回目]<br>2 3 4 &lt;-<br>ゲームロジックの雛形完了"
  },
  "Test06_6": {
    "step": "STEP6 ヒント機能",
    "subtitle": "ヒント機能の追加",
    "instructions": "1. クラスを `Test06_6` として宣言します。\n2. `main` メソッド内にて、ゲームの条件を表示し、その後に答え生成のためのユーザー入力を処理します。\n3. 整数入力に対して、答え生成ロジックを適用し、生成された回答の重複をチェックします。\n4. 無限ループでユーザーに3つの数字の入力を求め、入力が得られたら `hit` と `blow` をカウントします。\n5. 入力された値のそれぞれに対応して正解の数字をヒントとして出力します。もしユーザーの入力が0の場合、答えの対応する位置の数字を明示します。\n6. `if` 文を用いて、 `hit` の値が答えの桁数と一致した場合、ゲームクリアとしてループを抜けます。\n7. ゲームが続く場合、次のループへ移行します。\n8. ヒントを表示するメソッド `printHinto` を作成し、入力が0だった場合に正しいヒントを出力します。\n9. スキャナーを閉じます。",
    "expectedOutput": "$ java Test06_6<br><br>Hit&Blow<br><br>一意な整数を3つ入力してください（例: 12 34 56）:<br>10 20 30 &lt;-<br>数字を3個SPACE区切りで入力してください<br>[1回目]<br>2 3 4 &lt;-<br>ヒント: 2 3 4<br>Hit:3 Blow:0<br>おめでとう！ 答えを正解しました！"
  },
  "Test06_7": {
    "step": "STEP7 再挑戦機能",
    "subtitle": "ゲームの再挑戦機能を作成",
    "instructions": "1. クラスを `Test06_7` として宣言します。\n2. `main` メソッドで `Scanner` を用い、ユーザー入力を取得します。\n3. ゲームスタート時にタイトルを表示し、ユーザーに3つの一意な整数を入力するように促します。\n4. 生成された答えの重複チェックを行い、問題がなければループから抜け出し、その答えをゲームの問題として設定します。\n5. ゲームが続く間、ユーザー入力を3つ受け取り、ヒット数とブロー数を計算します。\n6. 各試行ごとにヒントを表示し、ヒット数が正解数に達した場合、ゲームはクリアされます。\n7. ゲーム終了後にユーザーに再挑戦するかを尋ねます。入力が \"yes\" の場合はゲームを続け、\"no\" の場合はゲームを終了します。\n8. `checkContinue` メソッドを作成し、ユーザーの入力に基づきゲームを続行するかの判断を行います。\n9. ヒントを印字する `printHinto` メソッドを利用して、入力が0の場合に正しい答えを提示します。\n10. スキャナーを閉じます。",
    "expectedOutput": "$ java Test06_7<br><br>Hit&Blow<br><br>一意な整数を3つ入力してください（例: 12 34 56）:<br>10 20 30 &lt;-<br>数字を3個SPACE区切りで入力してください<br>[1回目]<br>2 3 4 &lt;-<br>ヒント: 2 3 4<br>Hit:3 Blow:0<br>おめでとう！ 答えを正解しました！<br>ゲームを続けますか?[yes/no]<br>no &lt;-"
  }
}