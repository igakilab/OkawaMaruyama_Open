{
    "Test01": {
        "step": "STEP CPUと対戦するじゃんけんゲーム",
        "subtitle": "CPUとじゃんけんゲーム",
        "instructions": "## 仕様\n### CPUと対戦するじゃんけんゲームの概要\n- 何回戦戦うか最初に決定し,その回数分のCPUの手を数値で入力すると,プレイヤーの手にあわせてCPUとじゃんけんを複数回対戦できる\n- 最後に対戦結果が表示される\n\n### じゃんけんゲームの入出力の流れ\n- ユーザはじゃんけんを何回実施するか入力する\n  - 0以下の整数値が入力されたときは入力をやり直させる\n- ユーザはCPUの手として,任意の数値を指定した何回戦の数値分だけ入力する（スペース区切り）\n  - CPUの手は任意の数字を3で割った余りから決定される\n    - 余りが0のときはgu, 1のときはchoki, 2のときはpaとする\n    - 例えば10が入力されると3で割ると余りが1なのでchokiとなる\n  - 負の数が含まれていた場合,その数を正の数に変換する\n    - 例えば「`3 -1 5`」と入力すると「`3 1 5`」と入力されたことになる\n- 次に以下の処理をユーザが入力したじゃんけんの回数だけ繰り返す\n  - プログラムはCPUの手を1つずつ決定し,じゃんけんをスタートする\n  - ユーザは自分の手を gu choki pa のいずれかで入力する\n    - gu choki pa以外が入力されたときは無条件でユーザの負けとなる\n  - プログラムはCPUの手とユーザの手を比較し,結果を表示する。同時に勝敗を記録する\n- 最初に入力した回数じゃんけんが行われたら,プログラムが勝敗の合計を表示する\n### 実行例(1)\n$ Java Test02\n[じゃんけんゲームを何回戦実施するか入力してください]\n3<-\n[CPUの手として任意の数字をゲーム数分だけ入力してください]\n1<-\n2<-\n3<-\nCPUの手を決定します\n[あなたの手を入力してください|gu/choki/pa]\ngu<-\nあなたの勝ちです\n[あなたの手を入力してください|gu/choki/pa]\npa<-\n引き分けです\n[あなたの手を入力してください|gu/choki/pa]\nchoki<-\nあなたの負けです\nじゃんけんを終了します\n対戦成績は1勝1敗1引き分けでした\n\n### 実行例(2)\n$ Java Test02\n[じゃんけんゲームを何回戦実施するか入力してください]\n1<-\n[CPUの手として任意の数字をゲーム数分だけ入力してください]\n1<-\nCPUの手を決定します\n[あなたの手を入力してください|gu/choki/pa]\na<-\n手の入力が間違っていたのであなたの負けです\nじゃんけんを終了します\n対戦成績は0勝1敗0引き分けでした\n",
        "expectedOutput": "$ java Test01\n[じゃんけんゲームを何回戦実施するか入力してください]\n3 <-\n[CPUの手として任意の数字をゲーム数分だけ入力してください]\n1 <-\n2 <-\n3 <-\nCPUの手を決定します\n[あなたの手を入力してください|gu/choki/pa]\ngu <-\nあなたの勝ちです\n[あなたの手を入力してください|gu/choki/pa]\npa <-\n引き分けです\n[あなたの手を入力してください|gu/choki/pa]\nchoki <-\nあなたの負けです\nじゃんけんを終了します\n対戦成績は1勝1敗1引き分けでした\n\n$ java Test01\n[じゃんけんゲームを何回戦実施するか入力してください]\n1 <-\n[CPUの手として任意の数字をゲーム数分だけ入力してください]\n1 <-\nCPUの手を決定します\n[あなたの手を入力してください|gu/choki/pa]\na <-\n手の入力が間違っていたのであなたの負けです\nじゃんけんを終了します\n対戦成績は0勝1敗0引き分けでした"
    }
}
