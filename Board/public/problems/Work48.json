{
  "Work48_1": {
    "step": "STEP1 mainメソッドを宣言",
    "subtitle": "mainメソッドを宣言",
    "instructions": "まずはJavaプログラムのエントリーポイントとなる`main`メソッドを宣言します。この`main`メソッド内では、テスト用に\"mainメソッド\"というメッセージを標準出力に出力するコードを作成します。これはプログラムの動作確認を簡単にするためのものです。",
    "expectedOutput": "$ java Work48_1<br>mainメソッド"
  },
  "Work48_2": {
    "step": "STEP2 numbers配列を宣言",
    "subtitle": "numbers配列を宣言",
    "instructions": "次のステップでは、整数の配列`numbers`を宣言し、特定の値（45, 8, 3, 31, 1, 9, 22）で初期化します。さらに、配列の全ての要素をループで回し、要素を順番に出力するコードを追加します。この処理は配列が正しく初期化されていることを確認するためのものです。また、for-eachループを使用して、配列の各要素を出力します。",
    "expectedOutput": "$ java Work48_2<br>45 8 3 31 1 9 22 "
  },
  "Work48_3": {
    "step": "STEP3 3重のfor文を追加してテスト出力",
    "subtitle": "3重のfor文を追加してテスト出力",
    "instructions": "ここでは、3重のforループを使って、配列内の3つの要素の組み合わせを生成します。最初のforループ（`i`）は最初の要素を選び、2つ目のforループ（`j`）は次の要素を選びます。そして、3つ目のforループ（`k`）はその後の要素を選びます。このように動作するのは、各要素を1回だけ使用し、それらで組み合わせを作るためです。すべての組み合わせを出力するコードを追加し、組み合わせの出力を確認します。",
    "expectedOutput": "$ java Work48_3<br>(45,8,3)<br>(45,8,31)<br>(45,8,1)<br>(45,8,9)<br>(45,8,22)<br>(45,3,31)<br>(45,3,1)<br>(45,3,9)<br>(45,3,22)<br>(45,31,1)<br>(45,31,9)<br>(45,31,22)<br>(45,1,9)<br>(45,1,22)<br>(45,9,22)<br>(8,3,31)<br>(8,3,1)<br>(8,3,9)<br>(8,3,22)<br>(8,31,1)<br>(8,31,9)<br>(8,31,22)<br>(8,1,9)<br>(8,1,22)<br>(8,9,22)<br>(3,31,1)<br>(3,31,9)<br>(3,31,22)<br>(3,1,9)<br>(3,1,22)<br>(3,9,22)<br>(31,1,9)<br>(31,1,22)<br>(31,9,22)<br>(1,9,22)"
  },
  "Work48_4": {
    "step": "STEP4 isTriangleメソッドを宣言",
    "subtitle": "isTriangleメソッドを宣言",
    "instructions": "このステップでは、三角形の条件を判定する`isTriangle`メソッドを宣言します。`isTriangle`メソッドは3つの整数を引数に受け取り、三角形を作れるかどうかを判定します。ただし、この段階では常に`false`を返すようにして、プログラムの動作を確認するためにメソッドのテスト用のコードを書きます。これにより、メソッドの呼び出しが正しく行われているかをチェックできます。",
    "expectedOutput": "$ java Work48_4"
  },
  "Work48_5": {
    "step": "STEP5 isTriangleメソッドを作成",
    "subtitle": "isTriangleメソッドを作成",
    "instructions": "ここでいよいよ`isTriangle`メソッドのロジックを実装します。このメソッドは三角形の不等式を検証します。具体的には次の3つの条件を満たすか確認します：一辺の長さが他の二辺の長さの合計より小さいかどうかです。もしすべての条件を満たせば`true`を返し、1つでも満たせなければ`false`を返します。この論理は、どんな三角形の3辺に対しても真である数学的条件です。このロジックを用いて、ループ内で真になる組み合わせのみに対して出力を行います。",
    "expectedOutput": "$ java Work48_5<br>(45,31,22)<br>(8,3,9)"
  }
}