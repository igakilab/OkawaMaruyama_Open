Test01の分割後コード(Test02)の仕様

### STEP1
1. `Scanner`クラスをインポートし、新しいインスタンスを作成することで標準入力を受け取る準備を行う。  2. ユーザにじゃんけんゲームの回数を入力するように促すメッセージを出力する。  3. ユーザから整数値を受け取る。  4. 入力された数値が0以下の場合、再入力を促すメッセージを表示し、0より大きい数値が入力されるまでループで入力を受け付ける。最初の入力で0より大きい数値が入力された場合はそのまま次のステップに進む。  5.テスト用に入力されたゲーム回数を出力して確認する。
実行結果:
$ java Test02_1
[じゃんけんゲームを何回戦実施するか入力してください]
3 <-
ゲーム回数: 3

$ java Test02_1
[じゃんけんゲームを何回戦実施するか入力してください]
-1 <-
0以下の数値が入力されたのでもう一度入力し直しましょう
2 <-
ゲーム回数: 2

### STEP2
1. `Test02_1`で作成した内容を継承し、引き続き、CPUの手を決めるための整数値をユーザから入力されるようにする。  2. ユーザがゲーム回数分の整数値を入力することをメッセージで指示する。  3. 配列を使用して、ユーザが入力した任意の整数値をCPUの手として指定されるように取得する。  4. 取得した数値を一つずつ配列に格納する。  5. 正しくCPUの手が取得できたことを確認するため、入力された数値を出力するテスト用のコードを記述する。
実行結果:
$ java Test02_2
[じゃんけんゲームを何回戦実施するか入力してください]
3 <-
[CPUの手として任意の数字をゲーム数分だけ入力してください]
1 <-
2 <-
3 <-
1 2 3

###STEP3
1. `decideEnemyHand`という新しいメソッドを作成する。このメソッドは、CPUの手の数値に負の数が含まれていた場合、それを正の数に変換する。  2. `Test02_2`で取得したCPUの手の配列を引数として受け取る。  3. 引数として受け取った配列の各要素に対して、負の数があるかどうかをループで確認する。  4. 負の数が見つかったら、それを正の数に変換する。  5. 各要素を3で割った余りを新たに格納することでCPUの手を決定する。  6. 負の数を正の数に変換した際には、その旨を表示する。
実行結果:
$ java Test02_3
[じゃんけんゲームを何回戦実施するか入力してください]
1 <-
[CPUの手として任意の数字をゲーム数分だけ入力してください]
-1 <-
CPUの手を決定します
負の数は正の数に変換します

### STEP4
1. `Test02_3`で宣言した`decideEnemyHand`メソッドにテスト用のコードを追加し、CPUの手が正しく決定されたことを確認するための出力を行う。  2. CPUの手の決定に問題がないか、一つずつの手を表示して確認できるようにする。
実行結果:
$ java Test02_4
[じゃんけんゲームを何回戦実施するか入力してください]
3 <-
[CPUの手として任意の数字をゲーム数分だけ入力してください]
1 <-
2 <-
3 <-
CPUの手を決定します
1 2 0

### STEP5
1. `janken`という新しいメソッドを作成し、このメソッドはCPUの手とユーザの手を比較する処理を持つ。  2. このメソッドは、ユーザとCPUの手の違いを計算し、それに基づいて以下の結果を出力する: 引き分け、勝ち、負け。  3. ユーザの手が間違って入力された場合（-1が返される）、自動的にユーザの負けとして処理し、その旨を表示する。  4. 各結果に対して、それぞれ適切なメッセージを表示する。
実行結果:
$ java Test02_5
[じゃんけんゲームを何回戦実施するか入力してください]
3 <-
[CPUの手として任意の数字をゲーム数分だけ入力してください]
1 <-
2 <-
3 <-
CPUの手を決定します

### STEP6
1. `hand2num`というメソッドを作成し、このメソッドはじゃんけんの手を数値に変換する。  2. メソッドは文字列として与えられたじゃんけんの手（"gu", "choki", "pa"）を該当する数値（0, 1, 2）に変換する。  3. 手が正しくない場合には、エラーコードとして-1を返すようにする。
実行結果:
$ java Test02_6
[じゃんけんゲームを何回戦実施するか入力してください]
1 <-
[CPUの手として任意の数字をゲーム数分だけ入力してください]
1 <-
CPUの手を決定します


### STEP7
1. `num2hand`というメソッドを作成し、このメソッドは数値をじゃんけんの手に変換する。  2. メソッドでは、数値（0, 1, 2）を該当するじゃんけんの手の文字列（"gu", "choki", "pa"）に変換する。  3. 該当しない数値が入力された場合には、エラーメッセージとして"error"を返す。
実行結果:
$ java Test02_7
[じゃんけんゲームを何回戦実施するか入力してください]
1 <-
[CPUの手として任意の数字をゲーム数分だけ入力してください]
1 <-
CPUの手を決定します
コードがありません


### STEP8
1. `Test02_7`までに作成した各メソッドを統合し、じゃんけんゲーム全体の実行を管理する。  2. 各ゲームでユーザの入力を受け取り、`hand2num`メソッドを使って数値に変換する。  3. 各ゲームで`janken`メソッドを使って結果を判断し、勝敗をカウントする。  4. 全てのゲームを終えたら、ユーザが入力した遊び回数分のじゃんけんの総合結果を表示する。  5. 各メソッドはプログラム全体の流れをサポートし、必要に応じてエラーハンドリングも行う。
実行結果:
$ java Test02_8
[じゃんけんゲームを何回戦実施するか入力してください]
3 <-
[CPUの手として任意の数字をゲーム数分だけ入力してください]
1 <-
2 <-
3 <-
CPUの手を決定します
[あなたの手を入力してください|gu/choki/pa]
gu <-
あなたの勝ちです
[あなたの手を入力してください|gu/choki/pa]
pa <-
引き分けです
[あなたの手を入力してください|gu/choki/pa]
choki <-
あなたの負けです
じゃんけんを終了します
対戦成績は1勝1敗1引き分けでした

$ java Test02_8
[じゃんけんゲームを何回戦実施するか入力してください]
1 <-
[CPUの手として任意の数字をゲーム数分だけ入力してください]
1 <-
CPUの手を決定します
[あなたの手を入力してください|gu/choki/pa]
a <-
手の入力が間違っていたのであなたの負けです
じゃんけんを終了します
対戦成績は0勝1敗0引き分けでした